"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var nativescript_googlemaps_common_1 = require("./nativescript-googlemaps-common");
exports.markerProperty = nativescript_googlemaps_common_1.markerProperty;
var application = require("application");
var platform = require("platform");
var REQUEST_REQUIRED_PERMISSIONS = 1234;
var TnsGoogleMaps = (function (_super) {
    __extends(TnsGoogleMaps, _super);
    function TnsGoogleMaps() {
        var _this = _super.call(this) || this;
        _this.hasPermissions = false;
        var currentContext = application.android.currentContext;
        if (parseInt(platform.device.sdkVersion) >= 23) {
            if (android.support.v4.content.ContextCompat.checkSelfPermission(currentContext, android.Manifest.permission.ACCESS_FINE_LOCATION) != android.content.pm.PackageManager.PERMISSION_GRANTED) {
                var activityRequestPermissionHandler_1 = function (args) {
                    application.android.off(application.AndroidApplication.activityRequestPermissionsEvent, activityRequestPermissionHandler_1);
                    if (args.requestCode === REQUEST_REQUIRED_PERMISSIONS && args.grantResults.length > 0 && args.grantResults[0] === android.content.pm.PackageManager.PERMISSION_GRANTED) {
                        _this.hasPermissions = true;
                        _this.createNativeView();
                    }
                    else {
                        return;
                    }
                };
                application.android.on(application.AndroidApplication.activityRequestPermissionsEvent, activityRequestPermissionHandler_1);
                android.support.v4.app.ActivityCompat.requestPermissions(currentContext, ['android.permission.ACCESS_FINE_LOCATION'], REQUEST_REQUIRED_PERMISSIONS);
            }
            else {
                _this.hasPermissions = true;
            }
        }
        else {
            _this.hasPermissions = true;
        }
        return _this;
    }
    TnsGoogleMaps.prototype.createNativeView = function () {
        var nativeView = new org.nativescript.widgets.ContentLayout(this._context);
        if (!this.hasPermissions) {
            return;
        }
        var id = android.view.View.generateViewId();
        nativeView.setId(id);
        var activity = this._context;
        var googleMapOptions = new com.google.android.gms.maps.GoogleMapOptions().
            compassEnabled(true);
        var mapFragment = com.google.android.gms.maps.MapFragment.newInstance(googleMapOptions);
        this.android = mapFragment;
        var transaction = activity.getFragmentManager().beginTransaction();
        transaction.add(id, mapFragment, "MAP_FRAGMENT");
        transaction.commit();
        var that = new WeakRef(this);
        var callback = new com.google.android.gms.maps.OnMapReadyCallback({
            onMapReady: function (gMap) {
                gMap.setMyLocationEnabled(true);
                var owner = that.get();
                if (owner) {
                    owner.googleMap = gMap;
                    if (owner.marker) {
                        owner.addMarker(owner.marker);
                    }
                    owner.notify({ eventName: TnsGoogleMaps.mapLoadedEvent, object: owner, map: gMap });
                }
            }
        });
        mapFragment.getMapAsync(callback);
        return nativeView;
    };
    TnsGoogleMaps.prototype.addMarker = function (marker) {
        if (marker && this.googleMap) {
            var newMarkerPosition = new com.google.android.gms.maps.model.LatLng(marker.latitude, marker.longitude);
            this.googleMap.addMarker(new com.google.android.gms.maps.model.MarkerOptions().position(newMarkerPosition));
            this.googleMap.moveCamera(com.google.android.gms.maps.CameraUpdateFactory.newLatLngZoom(newMarkerPosition, this.googleMap.getMaxZoomLevel()));
        }
    };
    TnsGoogleMaps.prototype.clearMap = function () {
        if (this.googleMap) {
            this.googleMap.clear();
        }
    };
    TnsGoogleMaps.prototype[nativescript_googlemaps_common_1.markerProperty.getDefault] = function () {
        return undefined;
    };
    TnsGoogleMaps.prototype[nativescript_googlemaps_common_1.markerProperty.setNative] = function (value) {
        if (value) {
            this.addMarker(value);
        }
        else {
            this.clearMap();
        }
    };
    return TnsGoogleMaps;
}(nativescript_googlemaps_common_1.TnsGoogleMapsBase));
exports.TnsGoogleMaps = TnsGoogleMaps;
